package com.amecfw.sage.persistence;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

import com.amecfw.sage.persistence.OwnerDao;
import com.amecfw.sage.persistence.ProjectDao;
import com.amecfw.sage.persistence.SiteDao;
import com.amecfw.sage.persistence.LocationDao;
import com.amecfw.sage.persistence.LocationMetaDao;
import com.amecfw.sage.persistence.ProjectSiteDao;
import com.amecfw.sage.persistence.ProjectSiteMetaDao;
import com.amecfw.sage.persistence.CoordinateDao;
import com.amecfw.sage.persistence.ElementDao;
import com.amecfw.sage.persistence.ElementMetaDao;
import com.amecfw.sage.persistence.ElementGroupDao;
import com.amecfw.sage.persistence.ElementGroupMetaDao;
import com.amecfw.sage.persistence.GroupElementDao;
import com.amecfw.sage.persistence.StationDao;
import com.amecfw.sage.persistence.StationMetaDao;
import com.amecfw.sage.persistence.StationElementDao;
import com.amecfw.sage.persistence.StationElementMetaDao;
import com.amecfw.sage.persistence.ObservationTypeDao;
import com.amecfw.sage.persistence.ObservationGroupDao;
import com.amecfw.sage.persistence.ObservationGroupMetaDao;
import com.amecfw.sage.persistence.GroupObservationDao;
import com.amecfw.sage.persistence.GroupObservationMetaDao;
import com.amecfw.sage.persistence.ObservationDao;
import com.amecfw.sage.persistence.ObservationMetaDao;
import com.amecfw.sage.persistence.ParameterDao;
import com.amecfw.sage.persistence.MeasurementDao;
import com.amecfw.sage.persistence.MeasurementMetaDao;
import com.amecfw.sage.persistence.PhotoDao;
import com.amecfw.sage.persistence.PhotoMetaDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 7): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 7;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        OwnerDao.createTable(db, ifNotExists);
        ProjectDao.createTable(db, ifNotExists);
        SiteDao.createTable(db, ifNotExists);
        LocationDao.createTable(db, ifNotExists);
        LocationMetaDao.createTable(db, ifNotExists);
        ProjectSiteDao.createTable(db, ifNotExists);
        ProjectSiteMetaDao.createTable(db, ifNotExists);
        CoordinateDao.createTable(db, ifNotExists);
        ElementDao.createTable(db, ifNotExists);
        ElementMetaDao.createTable(db, ifNotExists);
        ElementGroupDao.createTable(db, ifNotExists);
        ElementGroupMetaDao.createTable(db, ifNotExists);
        GroupElementDao.createTable(db, ifNotExists);
        StationDao.createTable(db, ifNotExists);
        StationMetaDao.createTable(db, ifNotExists);
        StationElementDao.createTable(db, ifNotExists);
        StationElementMetaDao.createTable(db, ifNotExists);
        ObservationTypeDao.createTable(db, ifNotExists);
        ObservationGroupDao.createTable(db, ifNotExists);
        ObservationGroupMetaDao.createTable(db, ifNotExists);
        GroupObservationDao.createTable(db, ifNotExists);
        GroupObservationMetaDao.createTable(db, ifNotExists);
        ObservationDao.createTable(db, ifNotExists);
        ObservationMetaDao.createTable(db, ifNotExists);
        ParameterDao.createTable(db, ifNotExists);
        MeasurementDao.createTable(db, ifNotExists);
        MeasurementMetaDao.createTable(db, ifNotExists);
        PhotoDao.createTable(db, ifNotExists);
        PhotoMetaDao.createTable(db, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        OwnerDao.dropTable(db, ifExists);
        ProjectDao.dropTable(db, ifExists);
        SiteDao.dropTable(db, ifExists);
        LocationDao.dropTable(db, ifExists);
        LocationMetaDao.dropTable(db, ifExists);
        ProjectSiteDao.dropTable(db, ifExists);
        ProjectSiteMetaDao.dropTable(db, ifExists);
        CoordinateDao.dropTable(db, ifExists);
        ElementDao.dropTable(db, ifExists);
        ElementMetaDao.dropTable(db, ifExists);
        ElementGroupDao.dropTable(db, ifExists);
        ElementGroupMetaDao.dropTable(db, ifExists);
        GroupElementDao.dropTable(db, ifExists);
        StationDao.dropTable(db, ifExists);
        StationMetaDao.dropTable(db, ifExists);
        StationElementDao.dropTable(db, ifExists);
        StationElementMetaDao.dropTable(db, ifExists);
        ObservationTypeDao.dropTable(db, ifExists);
        ObservationGroupDao.dropTable(db, ifExists);
        ObservationGroupMetaDao.dropTable(db, ifExists);
        GroupObservationDao.dropTable(db, ifExists);
        GroupObservationMetaDao.dropTable(db, ifExists);
        ObservationDao.dropTable(db, ifExists);
        ObservationMetaDao.dropTable(db, ifExists);
        ParameterDao.dropTable(db, ifExists);
        MeasurementDao.dropTable(db, ifExists);
        MeasurementMetaDao.dropTable(db, ifExists);
        PhotoDao.dropTable(db, ifExists);
        PhotoMetaDao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(OwnerDao.class);
        registerDaoClass(ProjectDao.class);
        registerDaoClass(SiteDao.class);
        registerDaoClass(LocationDao.class);
        registerDaoClass(LocationMetaDao.class);
        registerDaoClass(ProjectSiteDao.class);
        registerDaoClass(ProjectSiteMetaDao.class);
        registerDaoClass(CoordinateDao.class);
        registerDaoClass(ElementDao.class);
        registerDaoClass(ElementMetaDao.class);
        registerDaoClass(ElementGroupDao.class);
        registerDaoClass(ElementGroupMetaDao.class);
        registerDaoClass(GroupElementDao.class);
        registerDaoClass(StationDao.class);
        registerDaoClass(StationMetaDao.class);
        registerDaoClass(StationElementDao.class);
        registerDaoClass(StationElementMetaDao.class);
        registerDaoClass(ObservationTypeDao.class);
        registerDaoClass(ObservationGroupDao.class);
        registerDaoClass(ObservationGroupMetaDao.class);
        registerDaoClass(GroupObservationDao.class);
        registerDaoClass(GroupObservationMetaDao.class);
        registerDaoClass(ObservationDao.class);
        registerDaoClass(ObservationMetaDao.class);
        registerDaoClass(ParameterDao.class);
        registerDaoClass(MeasurementDao.class);
        registerDaoClass(MeasurementMetaDao.class);
        registerDaoClass(PhotoDao.class);
        registerDaoClass(PhotoMetaDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}
