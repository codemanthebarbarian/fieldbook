package com.amecfw.sage.model;

import com.amecfw.sage.persistence.DaoSession;
import de.greenrobot.dao.DaoException;

import com.amecfw.sage.persistence.ObservationTypeDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import java.util.UUID;
import java.io.IOException;

import android.os.Parcel;
import android.os.Parcelable;

import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;
import org.xmlpull.v1.XmlSerializer;
// KEEP INCLUDES END
/**
 * Entity mapped to table OBSERVATION_TYPE.
 */
public class ObservationType extends EntityBase  implements UUIDSupport, Parcelable {

    private Long id;
    /** Not-null value. */
    private String rowGuid;
    /** Not-null value. */
    private String name;
    private Long rootID;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ObservationTypeDao myDao;

    private ObservationType observationType;
    private Long observationType__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public ObservationType() {
    }

    public ObservationType(Long id) {
        this.id = id;
    }

    public ObservationType(Long id, String rowGuid, String name, Long rootID) {
        this.id = id;
        this.rowGuid = rowGuid;
        this.name = name;
        this.rootID = rootID;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getObservationTypeDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getRowGuid() {
        return rowGuid;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setRowGuid(String rowGuid) {
        this.rowGuid = rowGuid;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    public Long getRootID() {
        return rootID;
    }

    public void setRootID(Long rootID) {
        this.rootID = rootID;
    }

    /** To-one relationship, resolved on first access. */
    public ObservationType getObservationType() {
        Long __key = this.rootID;
        if (observationType__resolvedKey == null || !observationType__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ObservationTypeDao targetDao = daoSession.getObservationTypeDao();
            ObservationType observationTypeNew = targetDao.load(__key);
            synchronized (this) {
                observationType = observationTypeNew;
            	observationType__resolvedKey = __key;
            }
        }
        return observationType;
    }

    public void setObservationType(ObservationType observationType) {
        synchronized (this) {
            this.observationType = observationType;
            rootID = observationType == null ? null : observationType.getId();
            observationType__resolvedKey = rootID;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    @Override
   	public UUID getUUID() {
       	return uuidFromString(rowGuid);
   	}

   	@Override
   	public void setUUID(UUID rowGuid) {
   		this.rowGuid = uuidFromUUID(rowGuid); 
   		
   	}

   	@Override
   	public void generateUUID() {
   		rowGuid = UUID.randomUUID().toString();
   	}
   	
   	/**
   	 * Generates a new id by calling generateUUID()
   	 * @see com.amecfw.sage.vegapp.model.UUIDSupport#setRowGuid()
   	 */
   	@Override
   	public void setRowGuid(){
   		generateUUID();
   	}
       
       @Override
   	public void fromXml(XmlPullParser parser) throws XmlPullParserException,
   			IOException {
   		// TODO Auto-generated method stub
   		
   	}

   	@Override
   	public void toXml(XmlSerializer serializer) throws XmlPullParserException,
   			IOException {
   		// TODO Auto-generated method stub
   		
   	}
   	
   	public static final Parcelable.Creator<ObservationType> CREATOR =
   			new Parcelable.Creator<ObservationType>() {
   		@Override
   		public ObservationType createFromParcel(Parcel in) { return new ObservationType(in);}
   		@Override
   		public ObservationType[] newArray(int size) {return new ObservationType[size];}
			};
   	
   	public ObservationType(Parcel in){
   		this.id = in.readLong();
   		this.setRowGuid(in.readString());
   		this.name = in.readString();
   		this.rootID = in.readLong();
   		this.observationType = in.readParcelable(ObservationType.class.getClassLoader());
   	}
   	
   	@Override
   	public void writeToParcel(Parcel dest, int flags){
   		dest.writeLong(this.id);
   		dest.writeString(this.getRowGuid());
   		dest.writeString(this.name);
   		dest.writeLong(this.rootID);
   		dest.writeParcelable(this.observationType, flags);
   	}
   	
   	@Override
   	public int describeContents() {
   		return 0;
   	}
    // KEEP METHODS END

}
