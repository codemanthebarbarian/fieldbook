package com.amecfw.sage.model;

import java.util.List;
import com.amecfw.sage.persistence.DaoSession;
import de.greenrobot.dao.DaoException;

import com.amecfw.sage.persistence.LocationDao;
import com.amecfw.sage.persistence.LocationMetaDao;
import com.amecfw.sage.persistence.SiteDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import java.util.UUID;
import java.io.IOException;

import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;
import org.xmlpull.v1.XmlSerializer;
// KEEP INCLUDES END
/**
 * Entity mapped to table LOCATION.
 */
public class Location extends EntityBase  implements UUIDSupport, MetaDataSupport<LocationMeta> {

    private Long id;
    /** Not-null value. */
    private String rowGuid;
    private String elevation;
    private String latitude;
    private String longitude;
    private String name;
    private String nema;
    private Long siteID;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient LocationDao myDao;

    private Site site;
    private Long site__resolvedKey;

    private List<LocationMeta> metaData;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Location() {
    }

    public Location(Long id) {
        this.id = id;
    }

    public Location(Long id, String rowGuid, String elevation, String latitude, String longitude, String name, String nema, Long siteID) {
        this.id = id;
        this.rowGuid = rowGuid;
        this.elevation = elevation;
        this.latitude = latitude;
        this.longitude = longitude;
        this.name = name;
        this.nema = nema;
        this.siteID = siteID;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getLocationDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getRowGuid() {
        return rowGuid;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setRowGuid(String rowGuid) {
        this.rowGuid = rowGuid;
    }

    public String getElevation() {
        return elevation;
    }

    public void setElevation(String elevation) {
        this.elevation = elevation;
    }

    public String getLatitude() {
        return latitude;
    }

    public void setLatitude(String latitude) {
        this.latitude = latitude;
    }

    public String getLongitude() {
        return longitude;
    }

    public void setLongitude(String longitude) {
        this.longitude = longitude;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getNema() {
        return nema;
    }

    public void setNema(String nema) {
        this.nema = nema;
    }

    public Long getSiteID() {
        return siteID;
    }

    public void setSiteID(Long siteID) {
        this.siteID = siteID;
    }

    /** To-one relationship, resolved on first access. */
    public Site getSite() {
        Long __key = this.siteID;
        if (site__resolvedKey == null || !site__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SiteDao targetDao = daoSession.getSiteDao();
            Site siteNew = targetDao.load(__key);
            synchronized (this) {
                site = siteNew;
            	site__resolvedKey = __key;
            }
        }
        return site;
    }

    public void setSite(Site site) {
        synchronized (this) {
            this.site = site;
            siteID = site == null ? null : site.getId();
            site__resolvedKey = siteID;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<LocationMeta> getMetaData() {
        if (metaData == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LocationMetaDao targetDao = daoSession.getLocationMetaDao();
            List<LocationMeta> metaDataNew = targetDao._queryLocation_MetaData(id);
            synchronized (this) {
                if(metaData == null) {
                    metaData = metaDataNew;
                }
            }
        }
        return metaData;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetMetaData() {
        metaData = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    @Override
    public boolean hasMetaData(){
    	if(id == null || id < 1){
    		if(metaData == null || metaData.size() < 1) return false;
    		return true;
    	}else{
    		try{
    			getMetaData();
    			if(metaData == null || metaData.size() < 1) return false;
        		return true;
    		}catch(DaoException e){
    			return false;
    		}
    	}
    }
    
    @Override
  	public void setMetaData(List<LocationMeta> metaData) {
  		this.metaData = metaData;		
  	}
    
    @Override
	public UUID getUUID() {
    	return uuidFromString(rowGuid);
	}

	@Override
	public void setUUID(UUID rowGuid) {
		this.rowGuid = uuidFromUUID(rowGuid); 
		
	}

	@Override
	public void generateUUID() {
		rowGuid = UUID.randomUUID().toString();
	}
	
	/**
	 * Generates a new id by calling generateUUID()
	 * @see com.amecfw.sage.vegapp.model.UUIDSupport#setRowGuid()
	 */
	@Override
	public void setRowGuid(){
		generateUUID();
	}
    
    @Override
	public void fromXml(XmlPullParser parser) throws XmlPullParserException,
			IOException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void toXml(XmlSerializer serializer) throws XmlPullParserException,
			IOException {
		// TODO Auto-generated method stub
		
	}
    // KEEP METHODS END

}
