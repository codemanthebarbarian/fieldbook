package com.amecfw.sage.model;

import java.util.List;
import com.amecfw.sage.persistence.DaoSession;
import de.greenrobot.dao.DaoException;

import com.amecfw.sage.persistence.ElementDao;
import com.amecfw.sage.persistence.StationDao;
import com.amecfw.sage.persistence.StationElementDao;
import com.amecfw.sage.persistence.StationElementMetaDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import java.util.UUID;
import java.io.IOException;

import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;
import org.xmlpull.v1.XmlSerializer;
// KEEP INCLUDES END
/**
 * Entity mapped to table STATION_ELEMENT.
 */
public class StationElement extends EntityBase  implements UUIDSupport, MetaDataSupport<StationElementMeta> {

    private Long id;
    /** Not-null value. */
    private String rowGuid;
    private String count;
    private long stationID;
    private long elementID;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient StationElementDao myDao;

    private Station station;
    private Long station__resolvedKey;

    private Element element;
    private Long element__resolvedKey;

    private List<StationElementMeta> metaData;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public StationElement() {
    }

    public StationElement(Long id) {
        this.id = id;
    }

    public StationElement(Long id, String rowGuid, String count, long stationID, long elementID) {
        this.id = id;
        this.rowGuid = rowGuid;
        this.count = count;
        this.stationID = stationID;
        this.elementID = elementID;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getStationElementDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getRowGuid() {
        return rowGuid;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setRowGuid(String rowGuid) {
        this.rowGuid = rowGuid;
    }

    public String getCount() {
        return count;
    }

    public void setCount(String count) {
        this.count = count;
    }

    public long getStationID() {
        return stationID;
    }

    public void setStationID(long stationID) {
        this.stationID = stationID;
    }

    public long getElementID() {
        return elementID;
    }

    public void setElementID(long elementID) {
        this.elementID = elementID;
    }

    /** To-one relationship, resolved on first access. */
    public Station getStation() {
        long __key = this.stationID;
        if (station__resolvedKey == null || !station__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            StationDao targetDao = daoSession.getStationDao();
            Station stationNew = targetDao.load(__key);
            synchronized (this) {
                station = stationNew;
            	station__resolvedKey = __key;
            }
        }
        return station;
    }

    public void setStation(Station station) {
        if (station == null) {
            throw new DaoException("To-one property 'stationID' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.station = station;
            stationID = station.getId();
            station__resolvedKey = stationID;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Element getElement() {
        long __key = this.elementID;
        if (element__resolvedKey == null || !element__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ElementDao targetDao = daoSession.getElementDao();
            Element elementNew = targetDao.load(__key);
            synchronized (this) {
                element = elementNew;
            	element__resolvedKey = __key;
            }
        }
        return element;
    }

    public void setElement(Element element) {
        if (element == null) {
            throw new DaoException("To-one property 'elementID' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.element = element;
            elementID = element.getId();
            element__resolvedKey = elementID;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<StationElementMeta> getMetaData() {
        if (metaData == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            StationElementMetaDao targetDao = daoSession.getStationElementMetaDao();
            List<StationElementMeta> metaDataNew = targetDao._queryStationElement_MetaData(id);
            synchronized (this) {
                if(metaData == null) {
                    metaData = metaDataNew;
                }
            }
        }
        return metaData;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetMetaData() {
        metaData = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    @Override
    public boolean hasMetaData(){
    	if(id == null || id < 1){
    		if(metaData == null || metaData.size() < 1) return false;
    		return true;
    	}else{
    		try{
    			getMetaData();
    			if(metaData == null || metaData.size() < 1) return false;
        		return true;
    		}catch(DaoException e){
    			return false;
    		}
    	}
    }
    
    @Override
 	public void setMetaData(List<StationElementMeta> metaData) {
 		this.metaData = metaData;		
 	}
     
     @Override
    	public UUID getUUID() {
        	return uuidFromString(rowGuid);
    	}

    	@Override
    	public void setUUID(UUID rowGuid) {
    		this.rowGuid = uuidFromUUID(rowGuid); 
    		
    	}

    	@Override
    	public void generateUUID() {
    		rowGuid = UUID.randomUUID().toString();
    	}
    	
    	/**
    	 * Generates a new id by calling generateUUID()
    	 * @see com.amecfw.sage.vegapp.model.UUIDSupport#setRowGuid()
    	 */
    	@Override
    	public void setRowGuid(){
    		generateUUID();
    	}
        
        @Override
    	public void fromXml(XmlPullParser parser) throws XmlPullParserException,
    			IOException {
    		// TODO Auto-generated method stub
    		
    	}

    	@Override
    	public void toXml(XmlSerializer serializer) throws XmlPullParserException,
    			IOException {
    		// TODO Auto-generated method stub
    		
    	}
    // KEEP METHODS END

}
