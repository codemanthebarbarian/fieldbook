package com.amecfw.sage.model;

import java.util.List;
import com.amecfw.sage.persistence.DaoSession;
import de.greenrobot.dao.DaoException;

import com.amecfw.sage.persistence.ObservationDao;
import com.amecfw.sage.persistence.ObservationMetaDao;
import com.amecfw.sage.persistence.ObservationTypeDao;
import com.amecfw.sage.persistence.StationDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import java.util.UUID;
import java.io.IOException;

import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;
import org.xmlpull.v1.XmlSerializer;
// KEEP INCLUDES END
/**
 * Entity mapped to table OBSERVATION.
 */
public class Observation extends EntityBase  implements UUIDSupport, MetaDataSupport<ObservationMeta> {

    private Long id;
    /** Not-null value. */
    private String rowGuid;
    private String observed;
    private java.util.Date dateObservered;
    private java.util.Date timeObserved;
    private long stationID;
    private long observationTypeID;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ObservationDao myDao;

    private Station station;
    private Long station__resolvedKey;

    private ObservationType observationType;
    private Long observationType__resolvedKey;

    private List<ObservationMeta> metaData;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Observation() {
    }

    public Observation(Long id) {
        this.id = id;
    }

    public Observation(Long id, String rowGuid, String observed, java.util.Date dateObservered, java.util.Date timeObserved, long stationID, long observationTypeID) {
        this.id = id;
        this.rowGuid = rowGuid;
        this.observed = observed;
        this.dateObservered = dateObservered;
        this.timeObserved = timeObserved;
        this.stationID = stationID;
        this.observationTypeID = observationTypeID;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getObservationDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getRowGuid() {
        return rowGuid;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setRowGuid(String rowGuid) {
        this.rowGuid = rowGuid;
    }

    public String getObserved() {
        return observed;
    }

    public void setObserved(String observed) {
        this.observed = observed;
    }

    public java.util.Date getDateObservered() {
        return dateObservered;
    }

    public void setDateObservered(java.util.Date dateObservered) {
        this.dateObservered = dateObservered;
    }

    public java.util.Date getTimeObserved() {
        return timeObserved;
    }

    public void setTimeObserved(java.util.Date timeObserved) {
        this.timeObserved = timeObserved;
    }

    public long getStationID() {
        return stationID;
    }

    public void setStationID(long stationID) {
        this.stationID = stationID;
    }

    public long getObservationTypeID() {
        return observationTypeID;
    }

    public void setObservationTypeID(long observationTypeID) {
        this.observationTypeID = observationTypeID;
    }

    /** To-one relationship, resolved on first access. */
    public Station getStation() {
        long __key = this.stationID;
        if (station__resolvedKey == null || !station__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            StationDao targetDao = daoSession.getStationDao();
            Station stationNew = targetDao.load(__key);
            synchronized (this) {
                station = stationNew;
            	station__resolvedKey = __key;
            }
        }
        return station;
    }

    public void setStation(Station station) {
        if (station == null) {
            throw new DaoException("To-one property 'stationID' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.station = station;
            stationID = station.getId();
            station__resolvedKey = stationID;
        }
    }

    /** To-one relationship, resolved on first access. */
    public ObservationType getObservationType() {
        long __key = this.observationTypeID;
        if (observationType__resolvedKey == null || !observationType__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ObservationTypeDao targetDao = daoSession.getObservationTypeDao();
            ObservationType observationTypeNew = targetDao.load(__key);
            synchronized (this) {
                observationType = observationTypeNew;
            	observationType__resolvedKey = __key;
            }
        }
        return observationType;
    }

    public void setObservationType(ObservationType observationType) {
        if (observationType == null) {
            throw new DaoException("To-one property 'observationTypeID' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.observationType = observationType;
            observationTypeID = observationType.getId();
            observationType__resolvedKey = observationTypeID;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<ObservationMeta> getMetaData() {
        if (metaData == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ObservationMetaDao targetDao = daoSession.getObservationMetaDao();
            List<ObservationMeta> metaDataNew = targetDao._queryObservation_MetaData(id);
            synchronized (this) {
                if(metaData == null) {
                    metaData = metaDataNew;
                }
            }
        }
        return metaData;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetMetaData() {
        metaData = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    @Override
    public boolean hasMetaData(){
    	if(id == null || id < 1){
    		if(metaData == null || metaData.size() < 1) return false;
    		return true;
    	}else{
    		try{
    			getMetaData();
    			if(metaData == null || metaData.size() < 1) return false;
        		return true;
    		}catch(DaoException e){
    			return false;
    		}
    	}
    }
    
    @Override
   	public void setMetaData(List<ObservationMeta> metaData) {
   		this.metaData = metaData;		
   	}
       
       @Override
      	public UUID getUUID() {
          	return uuidFromString(rowGuid);
      	}

      	@Override
      	public void setUUID(UUID rowGuid) {
      		this.rowGuid = uuidFromUUID(rowGuid); 
      		
      	}

      	@Override
      	public void generateUUID() {
      		rowGuid = UUID.randomUUID().toString();
      	}
      	
      	/**
      	 * Generates a new id by calling generateUUID()
      	 * @see com.amecfw.sage.vegapp.model.UUIDSupport#setRowGuid()
      	 */
      	@Override
      	public void setRowGuid(){
      		generateUUID();
      	}
          
          @Override
      	public void fromXml(XmlPullParser parser) throws XmlPullParserException,
      			IOException {
      		// TODO Auto-generated method stub
      		
      	}

      	@Override
      	public void toXml(XmlSerializer serializer) throws XmlPullParserException,
      			IOException {
      		// TODO Auto-generated method stub
      		
      	}
    // KEEP METHODS END

}
