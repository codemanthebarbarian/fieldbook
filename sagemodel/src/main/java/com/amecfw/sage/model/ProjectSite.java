package com.amecfw.sage.model;

import java.util.List;
import com.amecfw.sage.persistence.DaoSession;
import de.greenrobot.dao.DaoException;

import com.amecfw.sage.persistence.ProjectDao;
import com.amecfw.sage.persistence.ProjectSiteDao;
import com.amecfw.sage.persistence.ProjectSiteMetaDao;
import com.amecfw.sage.persistence.SiteDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import java.util.UUID;

import android.os.Parcel;
import android.os.Parcelable;

import java.io.IOException;

import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;
import org.xmlpull.v1.XmlSerializer;
// KEEP INCLUDES END
/**
 * Entity mapped to table PROJECT_SITE.
 */
public class ProjectSite extends EntityBase  implements Parcelable, UUIDSupport, MetaDataSupport<ProjectSiteMeta> {

    private Long id;
    /** Not-null value. */
    private String rowGuid;
    private Long projectID;
    private Long siteID;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ProjectSiteDao myDao;

    private Project project;
    private Long project__resolvedKey;

    private Site site;
    private Long site__resolvedKey;

    private List<ProjectSiteMeta> metaData;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public ProjectSite() {
    }

    public ProjectSite(Long id) {
        this.id = id;
    }

    public ProjectSite(Long id, String rowGuid, Long projectID, Long siteID) {
        this.id = id;
        this.rowGuid = rowGuid;
        this.projectID = projectID;
        this.siteID = siteID;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getProjectSiteDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getRowGuid() {
        return rowGuid;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setRowGuid(String rowGuid) {
        this.rowGuid = rowGuid;
    }

    public Long getProjectID() {
        return projectID;
    }

    public void setProjectID(Long projectID) {
        this.projectID = projectID;
    }

    public Long getSiteID() {
        return siteID;
    }

    public void setSiteID(Long siteID) {
        this.siteID = siteID;
    }

    /** To-one relationship, resolved on first access. */
    public Project getProject() {
        Long __key = this.projectID;
        if (project__resolvedKey == null || !project__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ProjectDao targetDao = daoSession.getProjectDao();
            Project projectNew = targetDao.load(__key);
            synchronized (this) {
                project = projectNew;
            	project__resolvedKey = __key;
            }
        }
        return project;
    }

    public void setProject(Project project) {
        synchronized (this) {
            this.project = project;
            projectID = project == null ? null : project.getId();
            project__resolvedKey = projectID;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Site getSite() {
        Long __key = this.siteID;
        if (site__resolvedKey == null || !site__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SiteDao targetDao = daoSession.getSiteDao();
            Site siteNew = targetDao.load(__key);
            synchronized (this) {
                site = siteNew;
            	site__resolvedKey = __key;
            }
        }
        return site;
    }

    public void setSite(Site site) {
        synchronized (this) {
            this.site = site;
            siteID = site == null ? null : site.getId();
            site__resolvedKey = siteID;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<ProjectSiteMeta> getMetaData() {
        if (metaData == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ProjectSiteMetaDao targetDao = daoSession.getProjectSiteMetaDao();
            List<ProjectSiteMeta> metaDataNew = targetDao._queryProjectSite_MetaData(id);
            synchronized (this) {
                if(metaData == null) {
                    metaData = metaDataNew;
                }
            }
        }
        return metaData;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetMetaData() {
        metaData = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    @Override
    public boolean hasMetaData(){
    	if(id == null || id < 1){
    		if(metaData == null || metaData.size() < 1) return false;
    		return true;
    	}else{
    		try{
    			getMetaData();
    			if(metaData == null || metaData.size() < 1) return false;
        		return true;
    		}catch(DaoException e){
    			return false;
    		}
    	}
    }
    
    @Override
  	public void setMetaData(List<ProjectSiteMeta> metaData) {
  		this.metaData = metaData;		
  	}
          
      @Override
  	public UUID getUUID() {
      	return uuidFromString(rowGuid);
  	}

  	@Override
  	public void setUUID(UUID rowGuid) {
  		this.rowGuid = uuidFromUUID(rowGuid); 
  		
  	}

  	@Override
  	public void generateUUID() {
  		rowGuid = UUID.randomUUID().toString();
  	}
  	
  	/**
  	 * Generates a new id by calling generateUUID()
  	 * @see com.amecfw.sage.vegapp.model.UUIDSupport#setRowGuid()
  	 */
  	@Override
  	public void setRowGuid(){
  		generateUUID();
  	}
      
      @Override
  	public void fromXml(XmlPullParser parser) throws XmlPullParserException,
  			IOException {
  		// TODO Auto-generated method stub
  		
  	}

  	@Override
  	public void toXml(XmlSerializer serializer) throws XmlPullParserException,
  			IOException {
  		// TODO Auto-generated method stub
  		
  	}

  	public static final Parcelable.Creator<ProjectSite> CREATOR =
  			new Parcelable.Creator<ProjectSite>() {
  		@Override
  		public ProjectSite createFromParcel(Parcel in) { return new ProjectSite(in); }
  		@Override
  		public ProjectSite[] newArray(int size) { return new ProjectSite[size]; }
  	};
  	
	public ProjectSite(Parcel in){
		this.id = in.readLong();
		this.setRowGuid(in.readString());
		this.projectID = in.readLong();
		this.siteID = in.readLong();
	}
			
	@Override
	public int describeContents() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public void writeToParcel(Parcel dest, int flags) {
		dest.writeLong(id);
		dest.writeString(rowGuid);
		dest.writeLong(projectID);
		dest.writeLong(siteID);
	}
    // KEEP METHODS END

}
