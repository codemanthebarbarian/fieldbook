package com.amecfw.sage.model;

import java.util.List;
import com.amecfw.sage.persistence.DaoSession;
import de.greenrobot.dao.DaoException;

import com.amecfw.sage.persistence.CoordinateDao;
import com.amecfw.sage.persistence.PhotoDao;
import com.amecfw.sage.persistence.PhotoMetaDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import java.util.UUID;
import java.io.IOException;

import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;
import org.xmlpull.v1.XmlSerializer;
// KEEP INCLUDES END
/**
 * Entity mapped to table PHOTO.
 */
public class Photo extends EntityBase  implements UUIDSupport, MetaDataSupport<PhotoMeta> {

    private Long id;
    /** Not-null value. */
    private String rowGuid;
    private String path;
    private java.util.Date dateCollected;
    private String description;
    private String name;
    private String parentTable;
    private Long parentID;
    private Long coordinateID;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PhotoDao myDao;

    private Coordinate coordinate;
    private Long coordinate__resolvedKey;

    private List<PhotoMeta> metaData;

    // KEEP FIELDS - put your custom fields here
    public static final String PHOTO_EXTENSION = ".jpg";
    // KEEP FIELDS END

    public Photo() {
    }

    public Photo(Long id) {
        this.id = id;
    }

    public Photo(Long id, String rowGuid, String path, java.util.Date dateCollected, String description, String name, String parentTable, Long parentID, Long coordinateID) {
        this.id = id;
        this.rowGuid = rowGuid;
        this.path = path;
        this.dateCollected = dateCollected;
        this.description = description;
        this.name = name;
        this.parentTable = parentTable;
        this.parentID = parentID;
        this.coordinateID = coordinateID;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPhotoDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getRowGuid() {
        return rowGuid;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setRowGuid(String rowGuid) {
        this.rowGuid = rowGuid;
    }

    public String getPath() {
        return path;
    }

    public void setPath(String path) {
        this.path = path;
    }

    public java.util.Date getDateCollected() {
        return dateCollected;
    }

    public void setDateCollected(java.util.Date dateCollected) {
        this.dateCollected = dateCollected;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getParentTable() {
        return parentTable;
    }

    public void setParentTable(String parentTable) {
        this.parentTable = parentTable;
    }

    public Long getParentID() {
        return parentID;
    }

    public void setParentID(Long parentID) {
        this.parentID = parentID;
    }

    public Long getCoordinateID() {
        return coordinateID;
    }

    public void setCoordinateID(Long coordinateID) {
        this.coordinateID = coordinateID;
    }

    /** To-one relationship, resolved on first access. */
    public Coordinate getCoordinate() {
        Long __key = this.coordinateID;
        if (coordinate__resolvedKey == null || !coordinate__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CoordinateDao targetDao = daoSession.getCoordinateDao();
            Coordinate coordinateNew = targetDao.load(__key);
            synchronized (this) {
                coordinate = coordinateNew;
            	coordinate__resolvedKey = __key;
            }
        }
        return coordinate;
    }

    public void setCoordinate(Coordinate coordinate) {
        synchronized (this) {
            this.coordinate = coordinate;
            coordinateID = coordinate == null ? null : coordinate.getId();
            coordinate__resolvedKey = coordinateID;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<PhotoMeta> getMetaData() {
        if (metaData == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PhotoMetaDao targetDao = daoSession.getPhotoMetaDao();
            List<PhotoMeta> metaDataNew = targetDao._queryPhoto_MetaData(id);
            synchronized (this) {
                if(metaData == null) {
                    metaData = metaDataNew;
                }
            }
        }
        return metaData;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetMetaData() {
        metaData = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    /**
     * Build the path to the photo including file name {table}/{id}/{rowguid}.jpg
     * @return path and file name
     */
    public String buildFilePath(){
    	return String.format("%s/%s", buildPath(), buildFileName());
    }
    
    /**
     * Build the path for {table}/{id}
     * @return path
     */
    public String buildPath(){
    	return String.format("%s/%s", getParentTable(), Long.toString(getParentID()));
    }
    
    /**
     * Build the file name {rowguid}{PHOTO_EXTENSION}
     * @return the file name
     */
    public String buildFileName(){
    	if(rowGuid == null) setRowGuid();
    	return String.format("%s%s", getRowGuid(), PHOTO_EXTENSION);
    }
    
    @Override
    public boolean hasMetaData(){
    	if(id == null || id < 1){
    		if(metaData == null || metaData.size() < 1) return false;
    		return true;
    	}else{
    		try{
    			getMetaData();
    			if(metaData == null || metaData.size() < 1) return false;
        		return true;
    		}catch(DaoException e){
    			return false;
    		}
    	}
    }
    
    @Override
  	public void setMetaData(List<PhotoMeta> metaData) {
  		this.metaData = metaData;		
  	}
    
    @Override
   	public UUID getUUID() {
       	return uuidFromString(rowGuid);
   	}

   	@Override
   	public void setUUID(UUID rowGuid) {
   		this.rowGuid = uuidFromUUID(rowGuid); 
   		
   	}

   	@Override
   	public void generateUUID() {
   		rowGuid = UUID.randomUUID().toString();
   	}
   	
   	/**
   	 * Generates a new id by calling generateUUID()
   	 * @see com.amecfw.sage.vegapp.model.UUIDSupport#setRowGuid()
   	 */
   	@Override
   	public void setRowGuid(){
   		generateUUID();
   	}
       
       @Override
   	public void fromXml(XmlPullParser parser) throws XmlPullParserException,
   			IOException {
   		// TODO Auto-generated method stub
   		
   	}

   	@Override
   	public void toXml(XmlSerializer serializer) throws XmlPullParserException,
   			IOException {
   		// TODO Auto-generated method stub
   		
   	}
    // KEEP METHODS END

}
