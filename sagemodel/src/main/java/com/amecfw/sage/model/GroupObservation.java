package com.amecfw.sage.model;

import java.util.List;
import com.amecfw.sage.persistence.DaoSession;
import de.greenrobot.dao.DaoException;

import com.amecfw.sage.persistence.GroupObservationDao;
import com.amecfw.sage.persistence.GroupObservationMetaDao;
import com.amecfw.sage.persistence.ObservationGroupDao;
import com.amecfw.sage.persistence.ObservationTypeDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import java.util.UUID;
import java.io.IOException;

import android.os.Parcel;
import android.os.Parcelable;

import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;
import org.xmlpull.v1.XmlSerializer;
// KEEP INCLUDES END
/**
 * Entity mapped to table GROUP_OBSERVATION.
 */
public class GroupObservation extends EntityBase  implements UUIDSupport, Parcelable, MetaDataSupport<GroupObservationMeta> {

    private Long id;
    /** Not-null value. */
    private String rowGuid;
    private String allowableValues;
    private long observationTypeID;
    private long observationGroupID;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient GroupObservationDao myDao;

    private ObservationType observationType;
    private Long observationType__resolvedKey;

    private ObservationGroup observationGroup;
    private Long observationGroup__resolvedKey;

    private List<GroupObservationMeta> metaData;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public GroupObservation() {
    }

    public GroupObservation(Long id) {
        this.id = id;
    }

    public GroupObservation(Long id, String rowGuid, String allowableValues, long observationTypeID, long observationGroupID) {
        this.id = id;
        this.rowGuid = rowGuid;
        this.allowableValues = allowableValues;
        this.observationTypeID = observationTypeID;
        this.observationGroupID = observationGroupID;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getGroupObservationDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getRowGuid() {
        return rowGuid;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setRowGuid(String rowGuid) {
        this.rowGuid = rowGuid;
    }

    public String getAllowableValues() {
        return allowableValues;
    }

    public void setAllowableValues(String allowableValues) {
        this.allowableValues = allowableValues;
    }

    public long getObservationTypeID() {
        return observationTypeID;
    }

    public void setObservationTypeID(long observationTypeID) {
        this.observationTypeID = observationTypeID;
    }

    public long getObservationGroupID() {
        return observationGroupID;
    }

    public void setObservationGroupID(long observationGroupID) {
        this.observationGroupID = observationGroupID;
    }

    /** To-one relationship, resolved on first access. */
    public ObservationType getObservationType() {
        long __key = this.observationTypeID;
        if (observationType__resolvedKey == null || !observationType__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ObservationTypeDao targetDao = daoSession.getObservationTypeDao();
            ObservationType observationTypeNew = targetDao.load(__key);
            synchronized (this) {
                observationType = observationTypeNew;
            	observationType__resolvedKey = __key;
            }
        }
        return observationType;
    }

    public void setObservationType(ObservationType observationType) {
        if (observationType == null) {
            throw new DaoException("To-one property 'observationTypeID' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.observationType = observationType;
            observationTypeID = observationType.getId();
            observationType__resolvedKey = observationTypeID;
        }
    }

    /** To-one relationship, resolved on first access. */
    public ObservationGroup getObservationGroup() {
        long __key = this.observationGroupID;
        if (observationGroup__resolvedKey == null || !observationGroup__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ObservationGroupDao targetDao = daoSession.getObservationGroupDao();
            ObservationGroup observationGroupNew = targetDao.load(__key);
            synchronized (this) {
                observationGroup = observationGroupNew;
            	observationGroup__resolvedKey = __key;
            }
        }
        return observationGroup;
    }

    public void setObservationGroup(ObservationGroup observationGroup) {
        if (observationGroup == null) {
            throw new DaoException("To-one property 'observationGroupID' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.observationGroup = observationGroup;
            observationGroupID = observationGroup.getId();
            observationGroup__resolvedKey = observationGroupID;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<GroupObservationMeta> getMetaData() {
        if (metaData == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GroupObservationMetaDao targetDao = daoSession.getGroupObservationMetaDao();
            List<GroupObservationMeta> metaDataNew = targetDao._queryGroupObservation_MetaData(id);
            synchronized (this) {
                if(metaData == null) {
                    metaData = metaDataNew;
                }
            }
        }
        return metaData;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetMetaData() {
        metaData = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    @Override
    public boolean hasMetaData(){
    	if(id == null || id < 1){
    		if(metaData == null || metaData.size() < 1) return false;
    		return true;
    	}else{
    		try{
    			getMetaData();
    			if(metaData == null || metaData.size() < 1) return false;
        		return true;
    		}catch(DaoException e){
    			return false;
    		}
    	}
    }
    
    @Override
	public void setMetaData(List<GroupObservationMeta> metaData) {
		this.metaData = metaData;		
	}
    
    @Override
   	public UUID getUUID() {
       	return uuidFromString(rowGuid);
   	}

   	@Override
   	public void setUUID(UUID rowGuid) {
   		this.rowGuid = uuidFromUUID(rowGuid); 
   		
   	}

   	@Override
   	public void generateUUID() {
   		rowGuid = UUID.randomUUID().toString();
   	}
   	
   	/**
   	 * Generates a new id by calling generateUUID()
   	 * @see com.amecfw.sage.vegapp.model.UUIDSupport#setRowGuid()
   	 */
   	@Override
   	public void setRowGuid(){
   		generateUUID();
   	}
       
       @Override
   	public void fromXml(XmlPullParser parser) throws XmlPullParserException,
   			IOException {
   		// TODO Auto-generated method stub
   		
   	}

   	@Override
   	public void toXml(XmlSerializer serializer) throws XmlPullParserException,
   			IOException {
   		// TODO Auto-generated method stub
   		
   	}
   	
   	public static final Parcelable.Creator<GroupObservation> CREATOR = 
   			new Parcelable.Creator<GroupObservation>(){
   		@Override
   		public GroupObservation createFromParcel(Parcel in) {return new GroupObservation(in);}
   		@Override
   		public GroupObservation[] newArray(int size) { return new GroupObservation[size];}
   	};
   	
   	public GroupObservation(Parcel in){
   		this.id = in.readLong();
   		this.setRowGuid(in.readString());
   		this.observationGroupID = in.readLong();
   		this.observationTypeID = this.observationType__resolvedKey = in.readLong();
   		this.setAllowableValues(in.readString());
   		this.setObservationType((ObservationType)in.readParcelable(ObservationType.class.getClassLoader()));
   	}
   	
   	public void writeToParcel(Parcel dest, int flags){
   		dest.writeLong(this.id);
   		dest.writeString(this.getRowGuid());
   		dest.writeLong(this.observationGroupID);
   		dest.writeLong(this.getObservationTypeID());
   		dest.writeString(this.getAllowableValues());
   		dest.writeParcelable(this.getObservationType(), flags);
   	}
   	
   	@Override
   	public int describeContents(){
   		return 0;
   	}
    // KEEP METHODS END

}
